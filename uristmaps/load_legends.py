import json, os, math, logging

from clint.textui import progress

from uristmaps.config import conf
from uristmaps.filefinder import legends_xml

df_tilesize = 16

# Offset of the world within the rendered map area.
offset = None

# Minimum zoom level to fit all world coodinates in a rendered map using 1px big tiles.
zoom = None

def load_sites():
    global offset
    global coordinate_scale
    global zoom

    with open("{}/biomes.json".format(conf["Paths"]["build"])) as biomjs:
        biomes = json.loads(biomjs.read())
    worldsize = biomes["worldsize"]

    zoom = 0
    while 2 ** zoom < worldsize:
        zoom += 1

    mapsize = 2**zoom
    offset = (mapsize - worldsize) // 2

    fname = legends_xml()
    logging.debug("Reading legends xml ({} Mb)".format(os.path.getsize(fname) // 1024 // 1024))

    sites = []
    sites_started = False
    with open(fname, "r") as xmlfile:
        for line in progress.dots(xmlfile, every=1000):
            if not sites_started:
                if line.startswith("<sites>"):
                    sites_started = True
                continue
            try:
                if not add_to_sites(sites, line.strip()):
                    break
            except Exception as e:
                print(e)
                print("Line: '{}'".format(line))
                break

    print() # A very nice linebreak after all the dots generated by the loop

    with open("{}/sites.json".format(conf["Paths"]["build"]), "w") as sitesjson:
        sitesjson.write(json.dumps(sites))

def add_to_sites(sites, line):
    """ Parse the current line add the information to the sites list.
    Return true when the line was handled, return false when the
    sites-block is over.
    """
    if line == "<site>":
        sites.append({})
        return True
    if line == "</site>":
        return True
    if line == "</sites>":
        return False

    #<structures> are not yet handled
    if "structures" in line:
        return True

    start = line.index(">")
    end = line.index("<", start)
    start += 1
    if line.startswith("<id>"):
        sites[-1]["id"] = line[start:end]
        return True
    if line.startswith("<type>"):
        sites[-1]["type"] = line[start:end]
        return True
    if line.startswith("<name>"):
        sites[-1]["name"] = line[start:end]
        return True
    if line.startswith("<coords>"):
        sites[-1]["coords"] = deflate_coords(*line[start:end].split(","))
        return True
    return False


def deflate_coords(x,y):
    """ Convert the coordinates from rough world coordinates to more
    exact world_tile coordinates.
    """
    return int(x) * df_tilesize + df_tilesize // 2, int(y) * df_tilesize + df_tilesize // 2


def num2deg(xtile, ytile):
    """ Transform the world coordinate into lat-lon coordinates that can
    be used as GeoJSON.
    """

    # The world coordinates are transformed:
    #   1. Multiply by the size of a world tile to properly project them on the
    #      df world map (which uses 16 units big tiles)
    #   2. Move them by the offset along to get them into the centered world render
    #   3. Move them by half tile size to center them into this df world tile.
    xtile = int(xtile) + offset
    ytile = int(ytile) + offset

    # latlon magic from osm ( http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_numbers_to_lon..2Flat._2 )
    n = 2.0 ** zoom
    lon_deg = xtile / n * 360.0 - 180.0
    lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * ytile / n)))
    lat_deg = math.degrees(lat_rad)
    return (lon_deg, lat_deg)


def create_geojson():

    with open(os.path.join(conf["Paths"]["build"], "sites.json")) as sitesjs:
        sites = json.loads(sitesjs.read())

    features = []
    for site in sites:
        feature = {"type":"Feature",
                   "properties": {
                       "name": site["name"],
                       "type": site["type"],
                       "id": site["id"],
                       "img": "/icons/{}.png".format(site["type"].replace(" ", "_")),
                       "popupContent": """{}<br>
                       Type: {}<br>
                       Coords: {}
                       """.format(site["name"].title(),
                               site["type"].title(),
                               site["coords"])
                       },
                   "geometry": {
                       "type": "Point",
                       "coordinates": num2deg(*site["coords"])
                   }
        }
        features.append(feature)

    with open("{}/sitesgeo.json".format(conf["Paths"]["build"]), "w") as sitesjson:
        sitesjson.write(json.dumps({"type": "FeatureCollection",
                                    "features": features}))

