import json, os, math, logging

from clint.textui import progress

from uristmaps.config import conf
from uristmaps.filefinder import sites_and_pops


def load_populations():
    with open(os.path.join(conf.get("Paths", "build"), "sites.json")) as sitesjs:
        sites = json.loads(sitesjs.read())

    fname = sites_and_pops()

    with open(fname, "r") as popsfile:
        for line in progress.dots(popsfile, every=10):
            if not sites_started:
                if line.startswith("<sites>"):
                    sites_started = True
                continue
            try:
                if not add_to_sites(sites, line.strip()):
                    break
            except Exception as e:
                print(e)
                print("Line: '{}'".format(line))
                break

    print() # A very nice linebreak after all the dots generated by the loop

    with open("{}/sites.json".format(conf["Paths"]["build"]), "w") as sitesjson:
        sitesjson.write(json.dumps(sites))


def add_to_sites(sites, line):
    """ Parse the current line add the information to the sites list.
    Return true when the line was handled, return false when the
    sites-block is over.
    """
    if line == "<site>":
        sites.append({})
        return True
    if line == "</site>":
        return True
    if line == "</sites>":
        return False

    #<structures> are not yet handled
    if "structures" in line:
        return True

    start = line.index(">")
    end = line.index("<", start)
    start += 1
    if line.startswith("<id>"):
        sites[-1]["id"] = line[start:end]
        return True
    if line.startswith("<type>"):
        sites[-1]["type"] = line[start:end]
        return True
    if line.startswith("<name>"):
        sites[-1]["name"] = line[start:end]
        return True
    if line.startswith("<coords>"):
        sites[-1]["coords"] = deflate_coords(*line[start:end].split(","))
        sites[-1]["coords_accurate"] = False
        return True
    return False


